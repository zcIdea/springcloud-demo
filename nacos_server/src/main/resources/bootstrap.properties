
# 这里必须使用bootstrap.properties。
#  同时，spring.application.name 值必须与上一阶段Nacos中创建的配置Data Id匹配（除了.properties或者.yaml后缀）。

spring.cloud.nacos.config.enabled = true
#spring.application.name=nacos-server
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
#不想通过服务名来加载，那么可以增加如下配置就会加载到Data ID=example.properties，Group=DEFAULT_GROUP的配置内容了
spring.cloud.nacos.config.prefix=example
#如果我们想要加载yaml格式的内容，而不是Properties格式的内容，那么可以通过如下配置，实现加载Data ID=example.yaml，Group=DEFAULT_GROUP的配置内容了,
# 注意nacos服务端配置内容的书写格式是yaml的
spring.cloud.nacos.config.file-extension=yaml
#如果我们对配置做了分组管理，那么可以通过如下配置，实现加载Data ID=example.yaml，Group=DEV_GROUP的配置内容了
spring.cloud.nacos.config.group=DEV_GROUP
#命名空间 默认public 用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的Group或Data ID的配置。
# Namespace的常用场景之一是不同环境的配置的区分隔离，例如：开发测试环境和生产环境的资源（如配置、服务）隔离等。
#spring.cloud.nacos.config.namespace=DEV_NAMESPACE

